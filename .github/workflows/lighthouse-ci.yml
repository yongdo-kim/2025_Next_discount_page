name: Lighthouse CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Cache Lighthouse CI database
        uses: actions/cache@v3
        with:
          path: lhci.db
          key: lighthouse-db-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            lighthouse-db-${{ runner.os }}-

      - name: Cache previous Lighthouse results
        uses: actions/cache@v3
        with:
          path: .lighthouse-previous
          key: lighthouse-results-${{ runner.os }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            lighthouse-results-${{ runner.os }}-${{ github.ref_name }}-
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Start server
        run: npm run prod &
        env:
          NODE_ENV: production

      - name: Wait for server to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse collect
        run: npx lhci collect --settings.throttling.cpuSlowdownMultiplier=4

      # - name: Run Lighthouse assert
      #   run: npx lhci assert || echo "⚠️ Some Lighthouse assertions failed, but continuing build..."

      - name: Display Lighthouse scores with comparison
        run: |
          echo "🚦 Lighthouse Performance Summary"
          echo "================================="
          echo "📁 Checking for Lighthouse reports..."
          ls -la .lighthouseci/ || echo "❌ .lighthouseci directory not found"
          
          # 현재 결과 요약을 위한 임시 파일 생성
          mkdir -p .lighthouse-current
          
          # JSON 파일 찾기 및 처리
          if ls .lighthouseci/lhr-*.json 1> /dev/null 2>&1; then
            echo "✅ Found Lighthouse reports:"
            
            # 전체 결과를 저장할 배열
            declare -A current_scores
            
            for file in .lighthouseci/lhr-*.json; do
              echo ""
              echo "📄 Report: $(basename "$file")"
              
              # Node.js로 점수 추출 및 비교
              node -e "
                try {
                  const fs = require('fs');
                  const path = require('path');
                  const lhr = JSON.parse(fs.readFileSync('$file', 'utf8'));
                  const scores = lhr.categories;
                  
                  const currentScores = {
                    performance: Math.round(scores.performance.score * 100),
                    accessibility: Math.round(scores.accessibility.score * 100),
                    bestPractices: Math.round(scores['best-practices'].score * 100),
                    seo: Math.round(scores.seo.score * 100),
                    url: lhr.finalUrl
                  };
                  
                  console.log('🎯 Performance: ' + currentScores.performance);
                  console.log('♿ Accessibility: ' + currentScores.accessibility); 
                  console.log('⚡ Best Practices: ' + currentScores.bestPractices);
                  console.log('🔍 SEO: ' + currentScores.seo);
                  console.log('🌐 URL: ' + currentScores.url);
                  
                  // 현재 결과를 파일에 저장 (다음 실행을 위해)
                  const filename = path.basename('$file').replace('.json', '-summary.json');
                  fs.writeFileSync('.lighthouse-current/' + filename, JSON.stringify(currentScores, null, 2));
                  
                  // 이전 결과와 비교
                  const previousFile = '.lighthouse-previous/' + filename;
                  if (fs.existsSync(previousFile)) {
                    const previousScores = JSON.parse(fs.readFileSync(previousFile, 'utf8'));
                    
                    console.log('');
                    console.log('📊 Changes from previous build:');
                    
                    const performanceDiff = currentScores.performance - previousScores.performance;
                    const accessibilityDiff = currentScores.accessibility - previousScores.accessibility;
                    const bestPracticesDiff = currentScores.bestPractices - previousScores.bestPractices;
                    const seoDiff = currentScores.seo - previousScores.seo;
                    
                    const getDiffEmoji = (diff) => diff > 0 ? '📈' : diff < 0 ? '📉' : '➡️';
                    const getDiffColor = (diff) => diff >= 10 ? '🟢' : diff <= -10 ? '🔴' : '🟡';
                    
                    console.log('🎯 Performance: ' + getDiffEmoji(performanceDiff) + ' ' + (performanceDiff >= 0 ? '+' : '') + performanceDiff + ' ' + getDiffColor(performanceDiff));
                    console.log('♿ Accessibility: ' + getDiffEmoji(accessibilityDiff) + ' ' + (accessibilityDiff >= 0 ? '+' : '') + accessibilityDiff + ' ' + getDiffColor(accessibilityDiff));
                    console.log('⚡ Best Practices: ' + getDiffEmoji(bestPracticesDiff) + ' ' + (bestPracticesDiff >= 0 ? '+' : '') + bestPracticesDiff + ' ' + getDiffColor(bestPracticesDiff));
                    console.log('🔍 SEO: ' + getDiffEmoji(seoDiff) + ' ' + (seoDiff >= 0 ? '+' : '') + seoDiff + ' ' + getDiffColor(seoDiff));
                    
                    // 심각한 성능 저하 경고
                    if (performanceDiff <= -15) {
                      console.log('');
                      console.log('⚠️  WARNING: Performance decreased significantly by ' + Math.abs(performanceDiff) + ' points!');
                    } else if (performanceDiff >= 10) {
                      console.log('');
                      console.log('🎉 Great! Performance improved by ' + performanceDiff + ' points!');
                    }
                  } else {
                    console.log('');
                    console.log('ℹ️  No previous results to compare with.');
                  }
                  
                } catch (error) {
                  console.log('❌ Error reading report:', error.message);
                }
              "
              echo "---"
            done
          else
            echo "❌ No Lighthouse report files found"
            echo "🔍 Available files in .lighthouseci/:"
            ls -la .lighthouseci/ 2>/dev/null || echo "Directory empty or doesn't exist"
          fi

      - name: Save current results for next comparison
        if: always()
        run: |
          # 현재 결과를 다음 실행을 위해 저장
          if [ -d ".lighthouse-current" ]; then
            rm -rf .lighthouse-previous
            cp -r .lighthouse-current .lighthouse-previous
            echo "✅ Current results saved for next comparison"
          fi

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30
