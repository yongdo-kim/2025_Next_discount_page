name: '[Lighthouse] CI'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # 매일 오전 9시 (UTC 0시), 오후 6시 (UTC 9시)에 실행
    - cron: '0 0,9 * * *'
  workflow_dispatch: # 수동 실행 가능

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      
      - name: Cache Lighthouse CI database
        uses: actions/cache@v3
        with:
          path: lhci.db
          key: lighthouse-db-${{ runner.os }}-chrome-${{ github.ref_name }}
          restore-keys: |
            lighthouse-db-${{ runner.os }}-chrome-

      - name: Cache previous Lighthouse results
        uses: actions/cache@v3
        with:
          path: .lighthouse-previous
          key: lighthouse-results-${{ runner.os }}-chrome-${{ github.ref_name }}-latest
          restore-keys: |
            lighthouse-results-${{ runner.os }}-chrome-${{ github.ref_name }}-latest
            lighthouse-results-${{ runner.os }}-chrome-${{ github.ref_name }}-

      - name: Cache Lighthouse history
        uses: actions/cache@v3
        with:
          path: .lighthouse-history
          key: lighthouse-history-${{ runner.os }}-chrome-${{ github.ref_name }}
          restore-keys: |
            lighthouse-history-${{ runner.os }}-chrome-

      - name: Debug cache status and fallback to artifacts
        run: |
          echo "🔍 Checking cache restore status for Chrome..."
          echo "Cache key: lighthouse-results-${{ runner.os }}-chrome-${{ github.ref_name }}-latest"
          echo "Previous results directory:"
          if [ -d ".lighthouse-previous" ]; then
            echo "✅ .lighthouse-previous directory exists (from cache)"
            ls -la .lighthouse-previous/ || echo "Directory is empty"
          else
            echo "❌ .lighthouse-previous directory not found from cache"
            echo "🔄 Attempting to restore from artifacts as fallback..."
            
            # Artifacts 백업에서 복원 시도 (실제로는 수동으로 다운로드해야 함)
            # 여기서는 첫 실행임을 알리는 메시지만 표시
            echo "ℹ️  This appears to be the first run or cache was cleared"
            echo "   Next run will have previous results to compare with"
          fi
          
      - name: Install dependencies
        run: npm ci

        
      - name: Build project
        run: |
          echo "🏗️ Starting build process..."
          npm run build || (echo "❌ Build failed, checking error logs" && exit 1)
          echo "✅ Build completed successfully"
        
      - name: Start server
        run: |
          echo "🚀 Starting production server..."
          npm run prod &
          SERVER_PID=$!
          echo "📝 Server started with PID: $SERVER_PID"
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        env:
          NODE_ENV: production

      - name: Wait for server to be ready
        run: |
          echo "⏳ Waiting for server to start..."
          npx wait-on http://localhost:3000 --timeout 120000
          echo "✅ Server is ready, checking health..."
          
          # Additional health check
          for i in {1..10}; do
            if curl -s http://localhost:3000/ > /dev/null; then
              echo "✅ Server health check passed"
              break
            else
              echo "⏳ Health check attempt $i/10 failed, waiting..."
              sleep 3
            fi
          done

      - name: Run Lighthouse collect
        run: |
          echo "🚀 Running Lighthouse collect for Chrome..."
          echo "📊 Server status check before running..."
          curl -I http://localhost:3000/ || echo "⚠️ Server response check failed"
          
          echo "🌐 Using Chrome with optimized settings"  
          timeout 600 npx lhci collect || (echo "❌ Lighthouse collect timed out or failed" && exit 1)
          
          echo "📊 Lighthouse collect completed. Checking results..."
          if [ -d ".lighthouseci" ]; then
            echo "✅ Results directory created successfully"
            echo "📁 Contents:"
            ls -la .lighthouseci/
            echo "📄 File count: $(find .lighthouseci -name '*.json' | wc -l) JSON files"
          else
            echo "❌ Results directory not found!"
            echo "🔍 Current directory contents:"
            ls -la
            exit 1
          fi

      # - name: Run Lighthouse assert
      #   run: npx lhci assert || echo "⚠️ Some Lighthouse assertions failed, but continuing build..."

      - name: Analyze Lighthouse results and calculate averages
        run: |
          echo "🚦 Lighthouse Performance Analysis (Chrome)"
          echo "=================================="
          echo "📁 Checking for Lighthouse reports..."
          ls -la .lighthouseci/ || echo "❌ .lighthouseci directory not found"
          
          # 새로운 스크립트로 평균값 계산 및 비교 분석
          if ls .lighthouseci/lhr-*.json 1> /dev/null 2>&1; then
            echo "✅ Running Lighthouse results analysis..."
            node scripts/lighthouse-results.mjs || echo "⚠️ Results analysis failed but continuing"
            
            echo ""
            echo "📁 Preparing .lighthouse-current directory for history system..."
            mkdir -p .lighthouse-current
            
            # lighthouse-results.mjs가 생성한 summary 파일들을 .lighthouse-current로 복사
            if ls *-summary.json 1> /dev/null 2>&1; then
              echo "✅ Moving summary files to .lighthouse-current directory..."
              mv *-summary.json .lighthouse-current/ || echo "⚠️ Failed to move summary files"
              echo "📊 Summary files in .lighthouse-current:"
              ls -la .lighthouse-current/
            else
              echo "⚠️ No summary files generated, creating placeholder..."
              echo '{"url": "placeholder", "scores": {"performance": 0}, "runs": 0}' > .lighthouse-current/placeholder-summary.json
            fi
            
            echo ""
            echo "📚 Adding results to history..."
            node scripts/lighthouse-history.mjs add || echo "⚠️ History update failed but continuing"
            
            echo ""
            echo "📈 Showing performance trend..."
            node scripts/lighthouse-history.mjs summary || echo "⚠️ Trend analysis failed but continuing"
          else
            echo "❌ No Lighthouse report files found"
            echo "🔍 Available files in .lighthouseci/:"
            ls -la .lighthouseci/ 2>/dev/null || echo "Directory empty or doesn't exist"
            echo "🔍 Checking file patterns:"
            find .lighthouseci -name "*.json" -type f 2>/dev/null || echo "No JSON files found"
            
            echo "📁 Creating empty .lighthouse-current directory..."
            mkdir -p .lighthouse-current
            echo "No Lighthouse results available" > .lighthouse-current/no-results.txt
          fi

      - name: Save current results for next comparison
        if: always()
        run: |
          echo "💾 Saving current results for next comparison..."
          
          # .lighthouse-current 디렉토리 확인 및 생성
          if [ ! -d ".lighthouse-current" ]; then
            echo "📁 Creating .lighthouse-current directory..."
            mkdir -p .lighthouse-current
            echo "No current results available" > .lighthouse-current/no-results.txt
          fi
          
          # 현재 결과를 다음 실행을 위해 저장
          if [ -d ".lighthouse-current" ]; then
            echo "📁 Current results found:"
            ls -la .lighthouse-current/
            
            # 빈 디렉토리인지 확인
            file_count=$(find .lighthouse-current -type f | wc -l)
            if [ "$file_count" -gt 0 ]; then
              # 캐시용 복사
              rm -rf .lighthouse-previous
              cp -r .lighthouse-current .lighthouse-previous
              echo "✅ Results copied to .lighthouse-previous for cache ($file_count files)"
              
              # 다음 실행을 위한 캐시 업데이트 확인
              echo "📊 Summary of saved results:"
              for file in .lighthouse-previous/*-summary.json; do
                if [ -f "$file" ]; then
                  echo "- $(basename "$file")"
                  node -e "
                    try {
                      const data = JSON.parse(require('fs').readFileSync('$file', 'utf8'));
                      console.log('  Performance: ' + data.scores.performance + ', Accessibility: ' + (data.scores.accessibility || 'N/A'));
                    } catch (e) {
                      console.log('  Error reading file: ' + e.message);
                    }
                  " 2>/dev/null || echo "  Could not parse summary file"
                fi
              done
            else
              echo "⚠️  .lighthouse-current directory is empty, creating minimal cache"
              mkdir -p .lighthouse-previous
              echo "No previous results available" > .lighthouse-previous/no-previous.txt
            fi
          else
            echo "❌ No current results directory found after creation attempt"
            mkdir -p .lighthouse-current
            mkdir -p .lighthouse-previous
            echo "Emergency fallback: created empty directories"
          fi

      - name: Prepare directories for artifacts upload
        if: always()
        run: |
          echo "📁 Ensuring directories exist for artifacts upload..."
          
          # .lighthouseci는 이미 있어야 하지만 확인
          if [ -d ".lighthouseci" ]; then
            echo "✅ .lighthouseci directory exists"
            file_count=$(find .lighthouseci -type f | wc -l)
            echo "   Files: $file_count"
            if [ "$file_count" -gt 0 ]; then
              echo "   File list:"
              ls -la .lighthouseci/
            else
              echo "⚠️  Directory is empty, adding placeholder"
              echo "No Lighthouse reports generated - workflow completed but no results" > .lighthouseci/no-results.txt
            fi
          else
            echo "❌ .lighthouseci directory missing - creating with placeholder"
            mkdir -p .lighthouseci
            echo "Lighthouse CI workflow ran but .lighthouseci directory was not created" > .lighthouseci/workflow-issue.txt
          fi
          
          # .lighthouse-current 확인 및 생성 (이미 이전 단계에서 처리되었지만 재확인)
          if [ -d ".lighthouse-current" ]; then
            echo "✅ .lighthouse-current directory exists"
            file_count=$(find .lighthouse-current -type f | wc -l)
            echo "   Files: $file_count"
            if [ "$file_count" -eq 0 ]; then
              echo "⚠️  Directory is empty, adding placeholder"
              echo "No current results available - check Lighthouse CI execution" > .lighthouse-current/empty-directory.txt
            fi
          else
            echo "⚠️  .lighthouse-current directory missing - creating with placeholder"
            mkdir -p .lighthouse-current
            echo "Directory created as safety measure for artifact upload" > .lighthouse-current/safety-placeholder.txt
          fi
          
          # .lighthouse-history 확인 및 생성
          if [ -d ".lighthouse-history" ]; then
            echo "✅ .lighthouse-history directory exists"
            file_count=$(find .lighthouse-history -type f | wc -l)
            echo "   Files: $file_count"
            if [ "$file_count" -eq 0 ]; then
              echo "⚠️  Directory is empty, adding placeholder"
              echo "History will be populated after successful Lighthouse runs" > .lighthouse-history/empty-history.txt
            fi
          else
            echo "ℹ️  .lighthouse-history directory missing - creating with placeholder"
            mkdir -p .lighthouse-history
            echo "Lighthouse history tracking - first run creates this directory" > .lighthouse-history/init-placeholder.txt
          fi
          
          echo ""
          echo "📊 Final directory summary:"
          echo "- .lighthouseci: $(find .lighthouseci -type f | wc -l) files"
          echo "- .lighthouse-current: $(find .lighthouse-current -type f | wc -l) files" 
          echo "- .lighthouse-history: $(find .lighthouse-history -type f | wc -l) files"

      - name: Debug and prepare artifacts for upload
        if: always()
        run: |
          echo "🔍 Pre-upload verification..."
          echo "📁 Current directory structure:"
          ls -la
          
          echo ""
          echo "📊 .lighthouseci directory:"
          if [ -d ".lighthouseci" ]; then
            ls -la .lighthouseci/
            echo "   JSON files: $(find .lighthouseci -name '*.json' | wc -l)"
            echo "   Total files: $(find .lighthouseci -type f | wc -l)"
          else
            echo "   ❌ Directory does not exist"
          fi
          
          echo ""
          echo "📈 .lighthouse-current directory:"
          if [ -d ".lighthouse-current" ]; then
            ls -la .lighthouse-current/
            echo "   Files: $(find .lighthouse-current -type f | wc -l)"
          else
            echo "   ❌ Directory does not exist"
          fi
          
          echo ""
          echo "📚 .lighthouse-history directory:"
          if [ -d ".lighthouse-history" ]; then
            ls -la .lighthouse-history/
            echo "   Files: $(find .lighthouse-history -type f | wc -l)"
          else
            echo "   ❌ Directory does not exist"
          fi

      - name: Upload Lighthouse results and reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-complete-results-chrome-${{ github.ref_name }}
          path: |
            .lighthouse-current
            .lighthouse-history
            .lighthouseci
          if-no-files-found: warn
          retention-days: 30
